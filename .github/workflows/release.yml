# .github/workflows/release.yml
name: Build and Release Terminal Game

on:
  push:
    tags:
      - 'v*'
    branches:
      - master # default branch
  pull_request:
    paths:
      - 'terminal-game/**'
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - name: "Modern"
            os: ubuntu-latest
            binary: asteroid-dodger-linux-x64-modern

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # Cache apt packages to speed up subsequent builds
    - name: Cache APT packages
      uses: actions/cache@v4
      with:
        path: /var/cache/apt/archives
        key: ${{ runner.os }}-apt-${{ hashFiles('**/release.yml') }}
        restore-keys: |
          ${{ runner.os }}-apt-

    - name: Install dependencies
      run: |
        sudo apt-get update
        # Add cppcheck for static analysis
        sudo apt-get install -y build-essential libncurses-dev cppcheck

    - name: Run Diagnostics (Check Environment)
      run: |
        echo "=== Build Environment Diagnostics ==="
        echo "Runner OS: ${{ matrix.os }}"
        echo "Working Directory: $(pwd)"
        echo "Compiler Version:"
        g++ --version
        echo "Available ncurses libraries:"
        # This find command is from your original workflow
        find /usr/lib* /lib* -name "*ncurses*" 2>/dev/null | head -20 || echo "No ncurses found"
        echo "---"

    # Static analysis step for code quality
    - name: Static Analysis with Cppcheck
      working-directory: ./terminal-game
      run: |
        echo "=== Running Static Analysis ==="
        cppcheck --enable=all --error-exitcode=0 --suppress=missingIncludeSystem src/

    - name: Build game
      working-directory: ./terminal-game
      run: |
        # Using 'make static' correctly falls back to a partial build
        make static
        echo "=== Build Details ==="
        file bin/main
        # This ldd check is from your original workflow
        ldd bin/main || echo "ldd not available or static binary"
        
    - name: Prepare binary for release
      run: |
        cp ./terminal-game/bin/main ./${{ matrix.binary }}
        echo "Prepared binary: ${{ matrix.binary }}"

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.binary }}
        path: ./${{ matrix.binary }}

  # It will only run when a tag is pushed.
  release:
    needs: build
    runs-on: ubuntu-latest
    # This 'if' condition ensures releases only happen for tags
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./binaries

    - name: Prepare release assets
      run: |
        cp ./binaries/asteroid-dodger-linux-x64-modern/asteroid-dodger-linux-x64-modern ./binaries/asteroid-dodger-linux-x64
        echo "Created generic binary for install script."
        ls -R ./binaries

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        files: ./binaries/**/*
        generate_release_notes: true
        body: |
          ðŸš€ **Terminal Asteroid Dodger Release ${{ github.ref_name }}**
          
          Download the appropriate binary for your system. The `modern` version is recommended.
          
          **Quick Start (Linux/WSL):**
          ```bash
          # Download and run the modern build
          curl -L -o asteroid-dodger https://github.com/${{ github.repository }}/releases/latest/download/asteroid-dodger-linux-x64-modern 
          chmod +x asteroid-dodger
          ./asteroid-dodger
          ```

          **Note:** These binaries are built with static C++ libraries but are dynamically linked to `ncurses`. Most Linux systems have `ncurses` pre-installed.
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
